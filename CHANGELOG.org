#+title:     Changelog
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2019-08-13 Tue>
#+language:  en
#+file_tags: changelog
#+tags:

* changelog
** Upcoming
*** Breaking
*** Additions
    + =degenMaybe= added to create refiners for maybe types (type Foo =
      ?string).
*** Fixes
** 0.13.0
*** Breaking
*** Additions
*** Fixes
    + Fix an issue where =flow-degen= could no longer be recognized as an
      imported module by Flow. This is related to recent changes to make
      =flow-degen= work when =strict= is enabled. It is not well understood what
      role =strict= played to cause a problem with the library, but it is
      suspected to be a difference in Flow versions. The old =./index.js.flow=
      workaround has been restored, yet we still retain the original =strict=
      fix.
** 0.12.0
*** Breaking
*** Additions
*** Fixes
    + Actually expose =degenRefiner= for consumption.
** 0.11.0
*** Breaking
    + It's possible your =baseDir= usage is now broken due to building upon
      =flow-degen='s broken behavior regarding it.
*** Additions
    + =degenRefiner= added to link to other refiners by symbol name. This
      effectively turns into an =import= statement and a function call in the
      generated refiner code. The symbol name can allow for recursive calls, and
      will significantly reduce the size of refiners instead of inlining the
      entire refiner. Thanks @gyrfalcon!
    + A usage example has been added for =degenList=.
*** Fixes
    + How =baseDir= in the configuration is used is now fixed.
    + Consumption of =flow-degen= should actually work when you use =strict=
      options in your repository.
** 0.10.0
*** Breaking
    + The =generators= configuration key is now a new structure and will break
      old consumers' configuration files. Instead of a flat input/output file
      mapping, each pairing is represented with a structure that indicates
      (still) an input and output file, but also input and output exports.
      Consumers will now need to identify the exports to be used (rather than
      assuming =default=) and indicate how those identifiers map to a generated
      version.
    + Consumers can no longer import the =default= of generated files. Instead
      consumers must indicate specific exported identifiers.
    + There is a verbiage change in the works to stop using the word
      "deserializer" due to its inaccuracy. Instead "refiner" is preferred. The
      input these generated functions take is already deserialized. "Validator"
      is a poor term. While =flow-degen= might be able to ensure the =structure=
      of data is valid, there are many ways to go about being valid such as
      accounting for state machine transitions or making sure a user token
      hasn't expired. Perhaps one could make the generated functions do these
      things, this has not been the focus of this library. Ultimately
      =flow-degen= is about taking in some unknown input and emitting an
      expected structure or an error detailing why the input doesn't satisfy the
      requirements.
*** Additions
    + An example of how to use =degenString= has been added.
    + An example of how to put together a custom generator has been added.
    + Configuration files can now indicate multiple refiners per file (both
      input and output). This paves the way for recursion - a feature in the
      near future. It also allows the refiner code to become significantly
      smaller when arranged for re-use.
*** Fixes
** 0.9.0
*** Breaking
    + The new =generatedPreamble= field is required and will break
      configurations that lack it.
*** Additions
    + Added =generatedPreamble= to the configuration, which gets added to the
      top of generated files.
*** Fixes
    + Use =@flow strict= for generated files. =0.8.0= did not actually accomplish
      this.
    + Fix some type coverage in =deserializer.js= which is a runtime file.
** 0.8.0
*** Breaking
*** Additions
*** Fixes
    + Use an exhaustive-union check to ensure your disjoint-union/sum types are
      checking for every member of the union.
    + When =JSON.stringify= receives a =mixed= it can be =undefined= as its
      output instead of =string=. The =stringify= utility has been added which
      will return the string ='undefined'= in the case of =undefined=.
    + +Use =@flow strict= for generated files.+ Adding =@flow strict= did not
      happen in this release but instead in =0.9.0=.
    + Fix a bug where the =deString= dependency from =degenEnum= wasn't being
      chained out of =degenSum=. The test framework is still being put together
      so this wasn't fully tested.
*** Internal
    + Add documentation for =degenSentinelValue=, =degenSum=, and =degenValue=.
    + Introduced a changelog.
    + Internally, there is now an automated test for generation and checking for
      Flow errors.
    + Internally, source files now use the =@flow strict= annotation.
