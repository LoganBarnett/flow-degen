#+title:     flow-degen README
#+author:    Logan Barnett
#+email:     logustus@gmail.com
#+date:      <2018-05-08 Tue>
#+language:  en
#+file_tags: readme flow deserialization

* flow-degen

This is a deserialization _generator_ for JavaScript objects that are under
[[http://flow.org][Flow]]. Some deserializer/validator projects use =$ObjMap= and some clever casting
to achieve a type safe means of deserialization/validation. =flow-degen= aims to
leverage Flow itself in ensuring type safety by _generating_ all of that ugly
deserialization/validation code you would have written by hand.

** installation

#+begin_src sh
yarn add -E -D flow-degen
#+end_src

** config structure

   You'll need a config file to work as inputs to =flow-degen=. It has the
   structure below. Any paths or file names that start with =./= are intended to
   show a relative directory.

#+begin_src json
  {
    "importLocations": {
      "importName": "./dir/runtime.js"
    },
    "typeLocations": {
      "TypeName": "./dir/type.js"
    },
    "generators": [
      ["deserializer-output-file.js", "./dir/generator-input-file.js"]
    ]
  }
#+end_src

** usage

Once installed, you can use the =flow-degen= script to generate your
deserializers:

#+begin_src sh
yarn flow-degen degen-config.json
#+end_src

*** consuming generated deserializers

The output files you indicate will always export a function as the =default=
export. The function takes the form of =(mixed) => T | Error=.

#+begin_src javascript
import fs from 'fs'
import fooDeserializer from './foo.deserializer.js'

const unvalidatedFoo = JSON.parse(fs.readFileSync('foo.json', 'utf8'))
const fooOrError = fooDeserializer(unvalidatedFoo)

// Refine the result.
if(fooOrError instanceof Error) {
  console.error('Error deserializing foo:', fooOrError)
} else {
  doStuffWithFoo(fooOrError)
}
#+end_src

** bragging rights

The config object above is generated from =config-generator.js= which in turn
must deserialize itself in order to build the generator. =mind-blown.gif=
